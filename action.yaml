name: 'Composite Discord Webhooks'
description: "A composite Github Action for sending messages through Discord's Webhooks"
author: MineBartekSA

branding:
  icon: 'message-square'
  color: 'orange'

inputs:
  webhook:
    description: 'Webhook URL'
    required: true
  content:
    description: 'Message content'
    required: false
    default: ''
  username:
    description: 'Message author username'
    required: false
    default: ''
  avatar_url:
    description: 'Message author avatar'
    required: false
    default: ''
  tts:
    description: 'Set message as TTS'
    required: false
    default: 'false'
  allowed_mentions:
    description: 'Comma-separated list of allowed mention types'
    required: false
    default: ''
  allowed_user_mentions:
    description: 'Comma-separated list of user id, that are allowed to be mentioned'
    required: false
    default: ''
  allowed_role_mentions:
    description: 'Comma-separated list of role id, that are allowed to be mentioned'
    required: false
    default: ''
  embed:
    description: 'JSON string of the embed object, or embed array'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: 'Prepare'
      shell: bash
      run: echo "DATA={" >> $GITHUB_ENV
    - name: 'Handle username'
      if: inputs.username != ''
      shell: bash
      env:
        USERNAME: ${{ inputs.username }}
      run: echo "DATA=$DATA\"username\":\"$(echo $USERNAME)\"" >> $GITHUB_ENV
    - name: 'Handle avatar_url'
      if: inputs.avatar_url != ''
      shell: bash
      env:
        AVATAR_URL: ${{ inputs.avatar_url }}
      run: echo "DATA=$DATA,\"avatar_url\":\"$(echo $AVATAR_URL)\"" >> $GITHUB_ENV
    - name: 'Handle tts'
      if: inputs.tts == 'true'
      shell: bash
      run: echo "DATA=$DATA,\"tts\":true" >> $GITHUB_ENV
    - name: 'Handle allowed_mentions'
      if: inputs.allowed_mentions != ''
      shell: bash
      env:
        ALLOWED_MENTIONS: ${{ inputs.allowed_mentions }}
        ALLOWED_USERS: ${{ inputs.allowed_user_mentions }}
        ALLOWED_ROLES: ${{ inputs.allowed_role_mentions }}
      run: |
        function split {
          TMP="\"$1\":["
          for allow in ${2//,/ }
          do
            TMP="$TMP\"$allow\","
          done
          if [ "${TMP: -1}" != "[" ]
          then
            TMP="${TMP::-1}"
          fi
          echo "$TMP]"
        }
        TMP="{$(split "parse" "$ALLOWED_MENTIONS")"
        if [ "$ALLOWED_USERS" != "" ]
        then
          TMP="$TMP,$(split "users" "$ALLOWED_USERS")"
        fi
        if [ "$ALLOWED_ROLES" != "" ]
        then
          TMP="$TMP,$(split "roles" "$ALLOWED_ROLES")"
        fi
        TMP="$TMP}"
        echo "DATA=$DATA,\"allowed_mentions\":$TMP" >> $GITHUB_ENV
    - name: 'Handle embed'
      if: inputs.embed != ''
      shell: bash
      env:
        EMBED: ${{ toJSON(fromJSON(inputs.embed)) }}
      run: |
        echo "DATA<<EOF" >> $GITHUB_ENV
        if [[ $EMBED == [* ]]
        then
          echo $(echo "$DATA,\"embeds\":$EMBED") >> $GITHUB_ENV
        else
          echo $(echo "$DATA,\"embeds\":[$EMBED]") >> $GITHUB_ENV
        fi
        echo "EOF" >> $GITHUB_ENV
    - name: 'Send webhook message'
      if: runner.os != 'Windows'
      shell: bash
      env:
        CONTENT: ${{ inputs.content }}
      run: |
        [[ $DATA == {,* ]] && DATA="{${DATA:2}"
        [ "$DATA" != "{" ] && DATA="$DATA,"
        echo "$DATA\"content\":\"$CONTENT\"}" | \
        sed -E ':a;N;$!ba;s/\r{0,1}\n/\\n/g' | \
        curl -i \
          -H "Accept: application/json" \
          -H "Content-Type: application/json" \
          -X POST \
          --data-binary @- \
          ${{ inputs.webhook }}
    - name: 'Send webhook message on Windows'
      if: runner.os == 'Windows'
      shell: pwsh
      env:
        CONTENT: ${{ inputs.content }}
      run: |
        if ($env:DATA[1] -eq ",") {
          $env:DATA = "{" + $env:DATA.SubString(2)
        }
        if ($env:DATA -ne "{") {
          $env:DATA += ","
        }
        $env:DATA += '"content":"' + $env:CONTENT.replace("`n", "\n") + '"}'
        $head = @{'Content-Type'='application/json'}
        Invoke-RestMethod -Uri ${{ inputs.webhook }} -Method 'POST' -Body $env:DATA -Headers $head
